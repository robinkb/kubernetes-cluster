#!/usr/bin/env bash

# Because Make is an awful task runner.

set -o errexit
set -o nounset
set -o pipefail

function main() {
    # shellcheck disable=SC2155 # This isn't going to fail.
    export ENV=$(cat .environment)

    # Brain-dead argument parser.
    # shellcheck disable=SC2068 # This requires splitting to work.
    $@
}

# deploy installs Flux as well as the flux-resources module,
# which contains OCIRepositories and Kustomizations to deploy
# all the other modules.
function deploy() {
    _load_config flux-system/flux.values.cue \
        | timoni --namespace flux-system apply flux \
            oci://ghcr.io/stefanprodan/modules/flux-aio \
            --values -
    _load_config flux-system/flux-resources.values.cue \
        | timoni --namespace flux-system apply flux-resources \
            ./flux-system/flux-resources \
            --values -
}

# destroy uninstalls the flux-resources module, which performs
# an ordered uninstallation of all installed modules.
function destroy() {
    timoni delete -n flux-system flux-resources
}

# build builds a Timoni module and prints the manifests to stdout.
function build() {
    module_path="$1"

    _timoni build "$module_path"
}

# diff provides rudimentary diffing functionality and is presently quite bad.
function diff() {
    module_path="$1"

    _timoni apply "$module_path" --diff --dry-run
}

# push builds a Timoni module and pushes the manifests to the OCI Registry.
function push() {
    module_path="$1"

    # shellcheck disable=SC1090 # There is no file to check.
    source <(_load_config_registry)

    # shellcheck disable=SC2154 # Variables are set by _load_config_registry.
    build "$module_path" | \
        flux push artifact "oci://$ociRegistry_baseUrl/$module_path:$ociRegistry_tag" \
            --path - --source local --revision "$ociRegistry_tag"
}

# launch builds the bootstrap node for the dev environment.
function launch() {
    libvirt_images="/var/lib/libvirt/images"

    node_name="primero"
    node_image="$libvirt_images/fedora-coreos-39.20240210.3.0-qemu.x86_64.qcow2"
    ignition_config="$PWD/target/$node_name/bootstrap.ign"
    ignition_device_arg=(--qemu-commandline="-fw_cfg name=opt/com.coreos/config,file=${ignition_config}")

    mkdir -p "$(dirname "$ignition_config" )"
    _load_config -e kubernetesController.bootstrapMachine \
        --out yaml | butane | jq > "$ignition_config"

    chcon --verbose --type virt_content_t "${node_image}"
    # Setup the correct SELinux label to allow access to the config
    chcon --verbose --type svirt_home_t "${ignition_config}"

    sudo cp /usr/share/edk2/ovmf/OVMF_VARS.fd "/var/lib/libvirt/qemu/nvram/${node_name}.fd"
    virt-install --connect qemu:///system --name "${node_name}" --vcpus 2 --memory 8192 \
            --os-variant fedora-coreos-stable --import --graphics spice \
            --disk="size=200,backing_store=${node_image}" \
            --network network=default "${ignition_device_arg[@]}" \
            --boot loader=/usr/share/edk2/ovmf/OVMF_CODE.secboot.fd,loader.readonly=yes,loader.secure=no,loader.type=pflash,nvram=/var/lib/libvirt/qemu/nvram/${node_name}.fd,hd,network \
            --noautoconsole
}

# _load_config uses SOPS to decrypt the secrets file, and Cue to combine
# the environment config. Additional flags may be passed to Cue
# to load additional flags or run expressions.
function _load_config() {
    pushd config/ >/dev/null
    sops exec-file "$ENV-secrets.yaml" \
        --filename secrets.yaml \
        "cue eval $ENV.cue $*"
    popd >/dev/null
}

# _load_config_registry builds on _load_config to extract configuration
# for the OCI Registry.
function _load_config_registry() {
    _load_config -e ociRegistry --out json | \
        jq -r 'keys[] as $k | "export ociRegistry_\($k)=\(.[$k])"'
}

# _timoni wraps around the Timoni CLI to feed in the global config,
# and uses info extracted from the module path to determine the namespace,
# module name, and module values file.
function _timoni() {
    operation="$1"
    module_path="$2"
    # shellcheck disable=SC2124
    flags="${@:3}"

    namespace=$(echo "$module_path" | cut -d "/" -f 3)
    module_name=$(basename "$module_path")

    # shellcheck disable=SC2086
    _load_config "$module_path.values.cue" | \
        timoni "$operation" --namespace "$namespace" \
            "$module_name" "$module_path" --values - $flags
}

main "$@"
